DROP TABLE CREDIT_LOG;
DROP TABLE ACTION_DEFINITION;
DROP TABLE BORROW_LOG;
DROP TABLE RETURN_LOG;
DROP TABLE COMMENTS;
DROP TABLE BORROW;
DROP TABLE DONATION;
DROP TABLE BOOK_TAGS;
DROP TABLE BOOKS;
DROP TABLE LOGIN_LOG;
DROP TABLE LOCAL_FILES;
DROP TABLE USERS;

CREATE TABLE USERS(
	USER_ID INT PRIMARY KEY generated by default as identity,
	NAME VARCHAR(20) NOT NULL UNIQUE,
	PASSWORD VARCHAR(32) NOT NULL,
	PRIVILEGE INT NOT NULL,
	EMAIL_ADDR VARCHAR(60),
	LOCKED BOOLEAN NOT NULL,
	PHONE VARCHAR(18),
	REAL_NAME VARCHAR(30),
	AVATAR_FILE VARCHAR(128),
	SCHOOL VARCHAR(30),
	MAJOR VARCHAR(60),
	QQ VARCHAR(10),
	REGISTRATION_IP VARCHAR(40) NOT NULL,
	REGISTRATION_DATE DATE NOT NULL
);

CREATE TABLE BOOKS(
	BID INT PRIMARY KEY generated by default as identity,
	ISBN10 CHAR(10) NOT NULL UNIQUE,
	ISBN13 CHAR(13) NOT NULL UNIQUE,
	NAME VARCHAR(100) NOT NULL,
	AUTHOR VARCHAR(100),
	PUBLISHER VARCHAR(60),
	SUMMARY VARCHAR(2000),
	COVER_FILE VARCHAR(256),
	PAGES INT,
	QUANTITY INT NOT NULL CHECK (QUANTITY>=0),
	AVAILABLE INT NOT NULL CHECK (AVAILABLE>=0),
	THUMBUP INT NOT NULL CHECK (THUMBUP>=0),
	THUMBDOWN INT NOT NULL CHECK (THUMBDOWN>=0),
	VALID BOOLEAN NOT NULL,
	ADD_TIME TIMESTAMP
);

CREATE TABLE BOOK_TAGS(
	ID INT PRIMARY KEY generated by default as identity,
	BID INT NOT NULL REFERENCES BOOKS,
	TAG_NAME VARCHAR(30),
	TAG_COUNT INT
);

CREATE TABLE DONATION(
	ID INT PRIMARY KEY generated by default as identity,
	USER_ID INT NOT NULL REFERENCES USERS,
	BID INT NOT NULL REFERENCES BOOKS,
	DONATE_DATE DATE NOT NULL
);

CREATE TABLE BORROW(
	ID INT PRIMARY KEY generated by default as identity,
	USER_ID INT NOT NULL REFERENCES USERS,
	BID INT NOT NULL REFERENCES BOOKS,
	BORROW_DATE DATE NOT NULL,
	DUE_DATE DATE NOT NULL
);

CREATE TABLE COMMENTS(
	ID INT PRIMARY KEY generated by default as identity,
	USER_ID INT NOT NULL REFERENCES USERS,
	BID INT NOT NULL REFERENCES BOOKS,
	CONTENT VARCHAR(423),
	RATING INT,
	COMMENT_DATE DATE NOT NULL
);

CREATE TABLE BORROW_LOG(
	ID INT PRIMARY KEY generated by default as identity,
	USER_ID INT NOT NULL REFERENCES USERS,
	BID INT NOT NULL REFERENCES BOOKS,
	BORROW_DATE DATE NOT NULL
);

CREATE TABLE RETURN_LOG(
	ID INT PRIMARY KEY generated by default as identity,
	USER_ID INT NOT NULL REFERENCES USERS,
	BID INT NOT NULL REFERENCES BOOKS,
	RETURN_DATE DATE NOT NULL
);

CREATE TABLE ACTION_DEFINITION(
	ACTION_TYPE INT PRIMARY KEY,
	ACTION_DESCRIPTION VARCHAR(100)
);

INSERT INTO ACTION_DEFINITION (ACTION_TYPE,ACTION_DESCRIPTION) VALUES (1,'ReturnBook');
INSERT INTO ACTION_DEFINITION (ACTION_TYPE,ACTION_DESCRIPTION) VALUES (2,'DonateBook');

CREATE TABLE CREDIT_LOG(
	ID INT PRIMARY KEY generated by default as identity,
	USER_ID INT NOT NULL REFERENCES USERS,
	BID INT REFERENCES BOOKS,
	ACTION_TYPE INT NOT NULL REFERENCES ACTION_DEFINITION,
	DELTA INT NOT NULL,
	LOG_TIME TIMESTAMP
);

CREATE TABLE LOGIN_LOG(
	ID INT PRIMARY KEY generated by default as identity,
	USER_ID INT NOT NULL REFERENCES USERS,
	USER_IP VARCHAR (40) NOT NULL,
	USERAGENT VARCHAR(100),
	LOGIN_TIME TIMESTAMP
);

CREATE TABLE LOCAL_FILES(
	FILEID INT PRIMARY KEY generated by default as identity,
	USER_ID INT NOT NULL REFERENCES USERS,
	USER_IP VARCHAR (40) NOT NULL,
	WEB_URL VARCHAR(1024),
	LOCAL_PATH VARCHAR(260) NOT NULL,
	UPLOAD_TIME TIMESTAMP
);

create trigger update_state_on_donation after insert on DONATION referencing new row as nrow
    for each row
        update BOOKS set QUANTITY=QUANTITY+1,AVAILABLE=AVAILABLE+1 where BID=nrow.bid;
		
create trigger increase_credit_on_donation after insert on DONATION referencing new row as nrow
    for each row
		insert into CREDIT_LOG (USER_ID,BID,ACTION_TYPE,DELTA,LOG_TIME) VALUES (nrow.USER_ID,nrow.BID,2,2,CURRENT_TIMESTAMP);
		
create trigger update_state_on_borrow after insert on BORROW referencing new row as nrow
    for each row
        update BOOKS set AVAILABLE=AVAILABLE-1 where BID=nrow.bid;
		
create trigger write_log_on_borrow after insert on BORROW referencing new row as nrow
    for each row
        insert into BORROW_LOG (USER_ID,BID,BORROW_DATE) values (nrow.USER_ID,nrow.BID,nrow.BORROW_DATE);
		
create trigger update_state_on_return after delete on BORROW referencing old row as orow
    for each row
        update BOOKS set AVAILABLE=AVAILABLE+1 where BID=orow.bid;

create trigger write_log_on_return after delete on BORROW referencing old row as orow
    for each row
        insert into RETURN_LOG (USER_ID,BID,RETURN_DATE) values (orow.USER_ID,orow.BID,CURRENT_DATE);